// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/redis/v1/cluster.proto

package redis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1/config"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cluster_Environment int32

const (
	Cluster_ENVIRONMENT_UNSPECIFIED Cluster_Environment = 0
	// Stable environment with a conservative update policy:
	// only hotfixes are applied during regular maintenance.
	Cluster_PRODUCTION Cluster_Environment = 1
	// Environment with more aggressive update policy: new versions
	// are rolled out irrespective of backward compatibility.
	Cluster_PRESTABLE Cluster_Environment = 2
)

var Cluster_Environment_name = map[int32]string{
	0: "ENVIRONMENT_UNSPECIFIED",
	1: "PRODUCTION",
	2: "PRESTABLE",
}

var Cluster_Environment_value = map[string]int32{
	"ENVIRONMENT_UNSPECIFIED": 0,
	"PRODUCTION":              1,
	"PRESTABLE":               2,
}

func (x Cluster_Environment) String() string {
	return proto.EnumName(Cluster_Environment_name, int32(x))
}

func (Cluster_Environment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{0, 0}
}

type Cluster_Health int32

const (
	// Cluster is in unknown state (we have no data)
	Cluster_HEALTH_UNKNOWN Cluster_Health = 0
	// Cluster is alive and well (all hosts are alive)
	Cluster_ALIVE Cluster_Health = 1
	// Cluster is inoperable (it cannot perform any of its essential functions)
	Cluster_DEAD Cluster_Health = 2
	// Cluster is partially alive (it can perform some of its essential functions)
	Cluster_DEGRADED Cluster_Health = 3
)

var Cluster_Health_name = map[int32]string{
	0: "HEALTH_UNKNOWN",
	1: "ALIVE",
	2: "DEAD",
	3: "DEGRADED",
}

var Cluster_Health_value = map[string]int32{
	"HEALTH_UNKNOWN": 0,
	"ALIVE":          1,
	"DEAD":           2,
	"DEGRADED":       3,
}

func (x Cluster_Health) String() string {
	return proto.EnumName(Cluster_Health_name, int32(x))
}

func (Cluster_Health) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{0, 1}
}

type Cluster_Status int32

const (
	// Cluster status is unknown
	Cluster_STATUS_UNKNOWN Cluster_Status = 0
	// Cluster is being created
	Cluster_CREATING Cluster_Status = 1
	// Cluster is running
	Cluster_RUNNING Cluster_Status = 2
	// Cluster failed
	Cluster_ERROR Cluster_Status = 3
	// Cluster is being updated.
	Cluster_UPDATING Cluster_Status = 4
	// Cluster is stopping.
	Cluster_STOPPING Cluster_Status = 5
	// Cluster stopped.
	Cluster_STOPPED Cluster_Status = 6
	// Cluster is starting.
	Cluster_STARTING Cluster_Status = 7
)

var Cluster_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "CREATING",
	2: "RUNNING",
	3: "ERROR",
	4: "UPDATING",
	5: "STOPPING",
	6: "STOPPED",
	7: "STARTING",
}

var Cluster_Status_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"CREATING":       1,
	"RUNNING":        2,
	"ERROR":          3,
	"UPDATING":       4,
	"STOPPING":       5,
	"STOPPED":        6,
	"STARTING":       7,
}

func (x Cluster_Status) String() string {
	return proto.EnumName(Cluster_Status_name, int32(x))
}

func (Cluster_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{0, 2}
}

type Host_Role int32

const (
	// Role of the host in the cluster is unknown.
	Host_ROLE_UNKNOWN Host_Role = 0
	// Host is the master Redis server in the cluster.
	Host_MASTER Host_Role = 1
	// Host is a replica (standby) Redis server in the cluster.
	Host_REPLICA Host_Role = 2
)

var Host_Role_name = map[int32]string{
	0: "ROLE_UNKNOWN",
	1: "MASTER",
	2: "REPLICA",
}

var Host_Role_value = map[string]int32{
	"ROLE_UNKNOWN": 0,
	"MASTER":       1,
	"REPLICA":      2,
}

func (x Host_Role) String() string {
	return proto.EnumName(Host_Role_name, int32(x))
}

func (Host_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{4, 0}
}

type Host_Health int32

const (
	// Health of the host is unknown.
	Host_HEALTH_UNKNOWN Host_Health = 0
	// The host is performing all its functions normally.
	Host_ALIVE Host_Health = 1
	// The host is inoperable, and cannot perform any of its essential functions.
	Host_DEAD Host_Health = 2
	// The host is degraded, and can perform only some of its essential functions.
	Host_DEGRADED Host_Health = 3
)

var Host_Health_name = map[int32]string{
	0: "HEALTH_UNKNOWN",
	1: "ALIVE",
	2: "DEAD",
	3: "DEGRADED",
}

var Host_Health_value = map[string]int32{
	"HEALTH_UNKNOWN": 0,
	"ALIVE":          1,
	"DEAD":           2,
	"DEGRADED":       3,
}

func (x Host_Health) String() string {
	return proto.EnumName(Host_Health_name, int32(x))
}

func (Host_Health) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{4, 1}
}

type Service_Type int32

const (
	Service_TYPE_UNSPECIFIED Service_Type = 0
	// The host is a Redis server.
	Service_REDIS Service_Type = 1
	// The host provides a Sentinel-only service (a quorum node).
	Service_ARBITER Service_Type = 2
	// The host is a Redis Cluster node.
	Service_REDIS_CLUSTER Service_Type = 3
)

var Service_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "REDIS",
	2: "ARBITER",
	3: "REDIS_CLUSTER",
}

var Service_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"REDIS":            1,
	"ARBITER":          2,
	"REDIS_CLUSTER":    3,
}

func (x Service_Type) String() string {
	return proto.EnumName(Service_Type_name, int32(x))
}

func (Service_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{5, 0}
}

type Service_Health int32

const (
	// Health of the server is unknown.
	Service_HEALTH_UNKNOWN Service_Health = 0
	// The server is working normally.
	Service_ALIVE Service_Health = 1
	// The server is dead or unresponsive.
	Service_DEAD Service_Health = 2
)

var Service_Health_name = map[int32]string{
	0: "HEALTH_UNKNOWN",
	1: "ALIVE",
	2: "DEAD",
}

var Service_Health_value = map[string]int32{
	"HEALTH_UNKNOWN": 0,
	"ALIVE":          1,
	"DEAD":           2,
}

func (x Service_Health) String() string {
	return proto.EnumName(Service_Health_name, int32(x))
}

func (Service_Health) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{5, 1}
}

// Description of a Redis cluster. For more information, see
// the Managed Service for Redis [documentation](/docs/managed-redis/concepts/).
type Cluster struct {
	// ID of the Redis cluster.
	// This ID is assigned by MDB at creation time.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the Redis cluster belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the Redis cluster.
	// The name is unique within the folder. 3-63 characters long.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Redis cluster. 0-256 characters long.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as `key:value` pairs.
	// Maximum 64 per cluster.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deployment environment of the Redis cluster.
	Environment Cluster_Environment `protobuf:"varint,7,opt,name=environment,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Environment" json:"environment,omitempty"`
	// Description of monitoring systems relevant to the Redis cluster.
	Monitoring []*Monitoring `protobuf:"bytes,8,rep,name=monitoring,proto3" json:"monitoring,omitempty"`
	// Configuration of the Redis cluster.
	Config    *ClusterConfig `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	NetworkId string         `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Aggregated cluster health.
	Health Cluster_Health `protobuf:"varint,11,opt,name=health,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Health" json:"health,omitempty"`
	// Cluster status.
	Status Cluster_Status `protobuf:"varint,12,opt,name=status,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Status" json:"status,omitempty"`
	// Redis cluster mode on/off.
	Sharded bool `protobuf:"varint,13,opt,name=sharded,proto3" json:"sharded,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,14,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Maintenance operation planned at nearest maintenance_window.
	PlannedOperation     *MaintenanceOperation `protobuf:"bytes,15,opt,name=planned_operation,json=plannedOperation,proto3" json:"planned_operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{0}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cluster) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *Cluster) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cluster) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Cluster) GetEnvironment() Cluster_Environment {
	if m != nil {
		return m.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (m *Cluster) GetMonitoring() []*Monitoring {
	if m != nil {
		return m.Monitoring
	}
	return nil
}

func (m *Cluster) GetConfig() *ClusterConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Cluster) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Cluster) GetHealth() Cluster_Health {
	if m != nil {
		return m.Health
	}
	return Cluster_HEALTH_UNKNOWN
}

func (m *Cluster) GetStatus() Cluster_Status {
	if m != nil {
		return m.Status
	}
	return Cluster_STATUS_UNKNOWN
}

func (m *Cluster) GetSharded() bool {
	if m != nil {
		return m.Sharded
	}
	return false
}

func (m *Cluster) GetMaintenanceWindow() *MaintenanceWindow {
	if m != nil {
		return m.MaintenanceWindow
	}
	return nil
}

func (m *Cluster) GetPlannedOperation() *MaintenanceOperation {
	if m != nil {
		return m.PlannedOperation
	}
	return nil
}

type Monitoring struct {
	// Name of the monitoring system.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the monitoring system.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Link to the monitoring system charts for the Redis cluster.
	Link                 string   `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Monitoring) Reset()         { *m = Monitoring{} }
func (m *Monitoring) String() string { return proto.CompactTextString(m) }
func (*Monitoring) ProtoMessage()    {}
func (*Monitoring) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{1}
}

func (m *Monitoring) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monitoring.Unmarshal(m, b)
}
func (m *Monitoring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monitoring.Marshal(b, m, deterministic)
}
func (m *Monitoring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monitoring.Merge(m, src)
}
func (m *Monitoring) XXX_Size() int {
	return xxx_messageInfo_Monitoring.Size(m)
}
func (m *Monitoring) XXX_DiscardUnknown() {
	xxx_messageInfo_Monitoring.DiscardUnknown(m)
}

var xxx_messageInfo_Monitoring proto.InternalMessageInfo

func (m *Monitoring) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Monitoring) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Monitoring) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type ClusterConfig struct {
	// Version of Redis server software.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration for Redis servers in the cluster.
	//
	// Types that are valid to be assigned to RedisConfig:
	//	*ClusterConfig_RedisConfig_5_0
	//	*ClusterConfig_RedisConfig_6_0
	RedisConfig isClusterConfig_RedisConfig `protobuf_oneof:"redis_config"`
	// Resources allocated to Redis hosts.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Access policy to DB
	Access               *Access  `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterConfig) Reset()         { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()    {}
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{2}
}

func (m *ClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterConfig.Unmarshal(m, b)
}
func (m *ClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterConfig.Marshal(b, m, deterministic)
}
func (m *ClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConfig.Merge(m, src)
}
func (m *ClusterConfig) XXX_Size() int {
	return xxx_messageInfo_ClusterConfig.Size(m)
}
func (m *ClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConfig proto.InternalMessageInfo

func (m *ClusterConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type isClusterConfig_RedisConfig interface {
	isClusterConfig_RedisConfig()
}

type ClusterConfig_RedisConfig_5_0 struct {
	RedisConfig_5_0 *config.RedisConfigSet5_0 `protobuf:"bytes,2,opt,name=redis_config_5_0,json=redisConfig50,proto3,oneof"`
}

type ClusterConfig_RedisConfig_6_0 struct {
	RedisConfig_6_0 *config.RedisConfigSet6_0 `protobuf:"bytes,6,opt,name=redis_config_6_0,json=redisConfig60,proto3,oneof"`
}

func (*ClusterConfig_RedisConfig_5_0) isClusterConfig_RedisConfig() {}

func (*ClusterConfig_RedisConfig_6_0) isClusterConfig_RedisConfig() {}

func (m *ClusterConfig) GetRedisConfig() isClusterConfig_RedisConfig {
	if m != nil {
		return m.RedisConfig
	}
	return nil
}

func (m *ClusterConfig) GetRedisConfig_5_0() *config.RedisConfigSet5_0 {
	if x, ok := m.GetRedisConfig().(*ClusterConfig_RedisConfig_5_0); ok {
		return x.RedisConfig_5_0
	}
	return nil
}

func (m *ClusterConfig) GetRedisConfig_6_0() *config.RedisConfigSet6_0 {
	if x, ok := m.GetRedisConfig().(*ClusterConfig_RedisConfig_6_0); ok {
		return x.RedisConfig_6_0
	}
	return nil
}

func (m *ClusterConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ClusterConfig) GetBackupWindowStart() *timeofday.TimeOfDay {
	if m != nil {
		return m.BackupWindowStart
	}
	return nil
}

func (m *ClusterConfig) GetAccess() *Access {
	if m != nil {
		return m.Access
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClusterConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClusterConfig_RedisConfig_5_0)(nil),
		(*ClusterConfig_RedisConfig_6_0)(nil),
	}
}

type Shard struct {
	// Name of the Redis shard. The shard name is assigned by user at creation time, and cannot be changed.
	// 1-63 characters long.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the Redis cluster the shard belongs to. The ID is assigned by MDB at creation time.
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{3}
}

func (m *Shard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shard.Unmarshal(m, b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return xxx_messageInfo_Shard.Size(m)
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shard) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type Host struct {
	// Name of the Redis host. The host name is assigned by MDB at creation time, and cannot be changed.
	// 1-63 characters long.
	//
	// The name is unique across all existing MDB hosts in Yandex.Cloud, as it defines the FQDN of the host.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the Redis cluster. The ID is assigned by MDB at creation time.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the availability zone where the Redis host resides.
	ZoneId string `protobuf:"bytes,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host belongs to.
	SubnetId string `protobuf:"bytes,4,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Resources allocated to the Redis host.
	Resources *Resources `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	// Role of the host in the cluster.
	Role Host_Role `protobuf:"varint,6,opt,name=role,proto3,enum=yandex.cloud.mdb.redis.v1.Host_Role" json:"role,omitempty"`
	// Status code of the aggregated health of the host.
	Health Host_Health `protobuf:"varint,7,opt,name=health,proto3,enum=yandex.cloud.mdb.redis.v1.Host_Health" json:"health,omitempty"`
	// Services provided by the host.
	Services             []*Service `protobuf:"bytes,8,rep,name=services,proto3" json:"services,omitempty"`
	ShardName            string     `protobuf:"bytes,9,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{4}
}

func (m *Host) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Host.Unmarshal(m, b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Host.Marshal(b, m, deterministic)
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return xxx_messageInfo_Host.Size(m)
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Host) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Host) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *Host) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *Host) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Host) GetRole() Host_Role {
	if m != nil {
		return m.Role
	}
	return Host_ROLE_UNKNOWN
}

func (m *Host) GetHealth() Host_Health {
	if m != nil {
		return m.Health
	}
	return Host_HEALTH_UNKNOWN
}

func (m *Host) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Host) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type Service struct {
	// Type of the service provided by the host.
	Type Service_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.mdb.redis.v1.Service_Type" json:"type,omitempty"`
	// Status code of server availability.
	Health               Service_Health `protobuf:"varint,2,opt,name=health,proto3,enum=yandex.cloud.mdb.redis.v1.Service_Health" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{5}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetType() Service_Type {
	if m != nil {
		return m.Type
	}
	return Service_TYPE_UNSPECIFIED
}

func (m *Service) GetHealth() Service_Health {
	if m != nil {
		return m.Health
	}
	return Service_HEALTH_UNKNOWN
}

type Resources struct {
	// ID of the preset for computational resources available to a host (CPU, memory etc.).
	// All available presets are listed in the [documentation](/docs/managed-redis/concepts/instance-types).
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage available to a host, in bytes.
	DiskSize             int64    `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{6}
}

func (m *Resources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources.Unmarshal(m, b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return xxx_messageInfo_Resources.Size(m)
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetResourcePresetId() string {
	if m != nil {
		return m.ResourcePresetId
	}
	return ""
}

func (m *Resources) GetDiskSize() int64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

type Access struct {
	// Allow access for DataLens
	DataLens             bool     `protobuf:"varint,1,opt,name=data_lens,json=dataLens,proto3" json:"data_lens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Access) Reset()         { *m = Access{} }
func (m *Access) String() string { return proto.CompactTextString(m) }
func (*Access) ProtoMessage()    {}
func (*Access) Descriptor() ([]byte, []int) {
	return fileDescriptor_c43051bc9a49dd6b, []int{7}
}

func (m *Access) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Access.Unmarshal(m, b)
}
func (m *Access) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Access.Marshal(b, m, deterministic)
}
func (m *Access) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Access.Merge(m, src)
}
func (m *Access) XXX_Size() int {
	return xxx_messageInfo_Access.Size(m)
}
func (m *Access) XXX_DiscardUnknown() {
	xxx_messageInfo_Access.DiscardUnknown(m)
}

var xxx_messageInfo_Access proto.InternalMessageInfo

func (m *Access) GetDataLens() bool {
	if m != nil {
		return m.DataLens
	}
	return false
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Cluster_Environment", Cluster_Environment_name, Cluster_Environment_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Cluster_Health", Cluster_Health_name, Cluster_Health_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Cluster_Status", Cluster_Status_name, Cluster_Status_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Host_Role", Host_Role_name, Host_Role_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Host_Health", Host_Health_name, Host_Health_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Service_Type", Service_Type_name, Service_Type_value)
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.Service_Health", Service_Health_name, Service_Health_value)
	proto.RegisterType((*Cluster)(nil), "yandex.cloud.mdb.redis.v1.Cluster")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.redis.v1.Cluster.LabelsEntry")
	proto.RegisterType((*Monitoring)(nil), "yandex.cloud.mdb.redis.v1.Monitoring")
	proto.RegisterType((*ClusterConfig)(nil), "yandex.cloud.mdb.redis.v1.ClusterConfig")
	proto.RegisterType((*Shard)(nil), "yandex.cloud.mdb.redis.v1.Shard")
	proto.RegisterType((*Host)(nil), "yandex.cloud.mdb.redis.v1.Host")
	proto.RegisterType((*Service)(nil), "yandex.cloud.mdb.redis.v1.Service")
	proto.RegisterType((*Resources)(nil), "yandex.cloud.mdb.redis.v1.Resources")
	proto.RegisterType((*Access)(nil), "yandex.cloud.mdb.redis.v1.Access")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/redis/v1/cluster.proto", fileDescriptor_c43051bc9a49dd6b)
}

var fileDescriptor_c43051bc9a49dd6b = []byte{
	// 1248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0xae, 0x6f, 0xb2, 0x75, 0x9c, 0x78, 0x0a, 0x57, 0xac, 0x5a, 0x8a, 0x62, 0x99, 0xb0, 0xae,
	0x19, 0xd6, 0xca, 0x49, 0x8a, 0x04, 0xbd, 0x00, 0xdd, 0x14, 0x5b, 0x6d, 0x84, 0xb9, 0xb2, 0x41,
	0xc9, 0x29, 0x76, 0xc1, 0x04, 0xd9, 0x62, 0x1c, 0x21, 0xb2, 0x64, 0x48, 0x74, 0x3a, 0xf7, 0x69,
	0x2f, 0xdb, 0xef, 0xda, 0x4f, 0x1b, 0x48, 0xca, 0x8e, 0xd3, 0x2e, 0x4e, 0x5a, 0xec, 0x4d, 0xe7,
	0xf0, 0xfb, 0x3e, 0x91, 0x87, 0xe7, 0x42, 0x78, 0x30, 0xf3, 0xe3, 0x80, 0xfc, 0xd1, 0x1c, 0x46,
	0xc9, 0x34, 0x68, 0x8e, 0x83, 0x41, 0x33, 0x25, 0x41, 0x98, 0x35, 0xcf, 0x77, 0x9b, 0xc3, 0x68,
	0x9a, 0x51, 0x92, 0xea, 0x93, 0x34, 0xa1, 0x09, 0xfa, 0x52, 0x00, 0x75, 0x0e, 0xd4, 0xc7, 0xc1,
	0x40, 0xe7, 0x40, 0xfd, 0x7c, 0x77, 0xf3, 0xab, 0x51, 0x92, 0x8c, 0x22, 0xd2, 0xe4, 0xc0, 0xc1,
	0xf4, 0xa4, 0x49, 0xc3, 0x31, 0xc9, 0xa8, 0x3f, 0x9e, 0x08, 0xee, 0xe6, 0xdd, 0x1c, 0x40, 0x67,
	0x13, 0xc2, 0x17, 0x93, 0x93, 0xc0, 0x9f, 0xe5, 0x8b, 0xcd, 0x15, 0x3b, 0x48, 0xe2, 0x93, 0x70,
	0x24, 0xec, 0x7d, 0x6f, 0xe7, 0xe3, 0x08, 0x07, 0x0b, 0xc2, 0xf7, 0x57, 0x13, 0xc6, 0x7e, 0x18,
	0x53, 0x12, 0xfb, 0xf1, 0x90, 0x08, 0xb0, 0xf6, 0xb7, 0x0c, 0xd5, 0x96, 0x38, 0x39, 0x6a, 0x40,
	0x31, 0x0c, 0xd4, 0xc2, 0x56, 0x61, 0x5b, 0xc6, 0xc5, 0x30, 0x40, 0x77, 0x41, 0x3e, 0x49, 0xa2,
	0x80, 0xa4, 0x5e, 0x18, 0xa8, 0x45, 0xee, 0xae, 0x09, 0x87, 0x15, 0xa0, 0xa7, 0x00, 0xc3, 0x94,
	0xf8, 0x94, 0x04, 0x9e, 0x4f, 0xd5, 0xd2, 0x56, 0x61, 0xbb, 0xbe, 0xb7, 0xa9, 0x8b, 0x93, 0xeb,
	0xf3, 0xd0, 0xe8, 0xee, 0x3c, 0x34, 0x58, 0xce, 0xd1, 0x06, 0x45, 0x08, 0xca, 0xb1, 0x3f, 0x26,
	0x6a, 0x99, 0x4b, 0xf2, 0x6f, 0xb4, 0x05, 0xf5, 0x80, 0x64, 0xc3, 0x34, 0x9c, 0xd0, 0x30, 0x89,
	0xd5, 0x0a, 0x5f, 0x5a, 0x76, 0xa1, 0x97, 0x20, 0x45, 0xfe, 0x80, 0x44, 0x99, 0x2a, 0x6d, 0x95,
	0xb6, 0xeb, 0x7b, 0xba, 0x7e, 0xe5, 0x15, 0xe9, 0xf9, 0x89, 0xf4, 0x0e, 0x27, 0x98, 0x31, 0x4d,
	0x67, 0x38, 0x67, 0xa3, 0x1e, 0xd4, 0x49, 0x7c, 0x1e, 0xa6, 0x49, 0x3c, 0x26, 0x31, 0x55, 0xab,
	0x5b, 0x85, 0xed, 0xc6, 0x8d, 0xc4, 0xcc, 0x0b, 0x16, 0x5e, 0x96, 0x40, 0x26, 0xc0, 0x38, 0x89,
	0x43, 0x9a, 0xa4, 0x61, 0x3c, 0x52, 0x6b, 0x7c, 0x77, 0xf7, 0x57, 0x08, 0xbe, 0x5e, 0x80, 0xf1,
	0x12, 0x11, 0xfd, 0x08, 0x92, 0xb8, 0x50, 0x55, 0xe6, 0xd1, 0xdc, 0xbe, 0x7e, 0x4f, 0x2d, 0x8e,
	0xc7, 0x39, 0x0f, 0xdd, 0x03, 0x88, 0x09, 0x7d, 0x9b, 0xa4, 0x67, 0xec, 0xc6, 0x80, 0xc7, 0x50,
	0xce, 0x3d, 0x56, 0x80, 0x0c, 0x90, 0x4e, 0x89, 0x1f, 0xd1, 0x53, 0xb5, 0xce, 0x0f, 0xfd, 0xdd,
	0x0d, 0x0e, 0x7d, 0xc4, 0x09, 0x38, 0x27, 0x32, 0x89, 0x8c, 0xfa, 0x74, 0x9a, 0xa9, 0x6b, 0x37,
	0x96, 0x70, 0x38, 0x01, 0xe7, 0x44, 0xa4, 0x42, 0x35, 0x3b, 0xf5, 0xd3, 0x80, 0x04, 0xea, 0xfa,
	0x56, 0x61, 0xbb, 0x86, 0xe7, 0x26, 0xfa, 0x15, 0xd0, 0x52, 0x82, 0x7a, 0x6f, 0xc3, 0x38, 0x48,
	0xde, 0xaa, 0x0d, 0x1e, 0x8c, 0x87, 0xab, 0xe2, 0x79, 0x41, 0x7a, 0xc3, 0x39, 0x78, 0x63, 0xfc,
	0xbe, 0x0b, 0xfd, 0x06, 0x1b, 0x93, 0xc8, 0x8f, 0x63, 0x12, 0x78, 0xc9, 0x84, 0xa4, 0x3e, 0x4f,
	0xb3, 0xcf, 0xb8, 0x76, 0xf3, 0x66, 0xda, 0xdd, 0x39, 0x0d, 0x2b, 0xb9, 0xd2, 0xc2, 0xb3, 0xf9,
	0x14, 0xea, 0x4b, 0xb9, 0x86, 0x14, 0x28, 0x9d, 0x91, 0x59, 0x5e, 0x4a, 0xec, 0x13, 0xdd, 0x86,
	0xca, 0xb9, 0x1f, 0x4d, 0x49, 0x5e, 0x47, 0xc2, 0x78, 0x56, 0x7c, 0x52, 0xd0, 0x2c, 0xa8, 0x2f,
	0x65, 0x16, 0xba, 0x0b, 0x77, 0x4c, 0xfb, 0xd8, 0xc2, 0x5d, 0xfb, 0xb5, 0x69, 0xbb, 0x5e, 0xdf,
	0x76, 0x7a, 0x66, 0xcb, 0x7a, 0x69, 0x99, 0x6d, 0xe5, 0x16, 0x6a, 0x00, 0xf4, 0x70, 0xb7, 0xdd,
	0x6f, 0xb9, 0x56, 0xd7, 0x56, 0x0a, 0x68, 0x1d, 0xe4, 0x1e, 0x36, 0x1d, 0xd7, 0x38, 0xec, 0x98,
	0x4a, 0x51, 0xfb, 0x01, 0x24, 0x71, 0x5f, 0x08, 0x41, 0xe3, 0xc8, 0x34, 0x3a, 0xee, 0x91, 0xd7,
	0xb7, 0x7f, 0xb2, 0xbb, 0x6f, 0x6c, 0xe5, 0x16, 0x92, 0xa1, 0x62, 0x74, 0xac, 0x63, 0x53, 0x29,
	0xa0, 0x1a, 0x94, 0xdb, 0xa6, 0xd1, 0x56, 0x8a, 0x68, 0x0d, 0x6a, 0x6d, 0xf3, 0x15, 0x36, 0xda,
	0x66, 0x5b, 0x29, 0x69, 0x33, 0x90, 0xc4, 0x6d, 0x31, 0x01, 0xc7, 0x35, 0xdc, 0xbe, 0xb3, 0x24,
	0xb0, 0x06, 0xb5, 0x16, 0x36, 0x0d, 0xd7, 0xb2, 0x5f, 0x29, 0x05, 0x54, 0x87, 0x2a, 0xee, 0xdb,
	0x36, 0x33, 0x8a, 0x4c, 0xdb, 0xc4, 0xb8, 0x8b, 0x95, 0x12, 0x43, 0xf5, 0x7b, 0x6d, 0x81, 0x2a,
	0x33, 0xcb, 0x71, 0xbb, 0xbd, 0x1e, 0xb3, 0x2a, 0x8c, 0xc3, 0x2d, 0xb3, 0xad, 0x48, 0x62, 0xc9,
	0xc0, 0x1c, 0x58, 0xd5, 0x8e, 0x01, 0x2e, 0xea, 0x62, 0xd1, 0x22, 0x0a, 0x57, 0xb7, 0x88, 0xe2,
	0x87, 0x2d, 0x02, 0x41, 0x39, 0x0a, 0xe3, 0x33, 0xde, 0x8d, 0x64, 0xcc, 0xbf, 0xb5, 0x7f, 0x4a,
	0xb0, 0x7e, 0xa9, 0x5a, 0x58, 0x02, 0x9e, 0x93, 0x34, 0x63, 0x1a, 0x42, 0x7e, 0x6e, 0xa2, 0xdf,
	0x41, 0xe1, 0x17, 0xef, 0x89, 0x7a, 0xf2, 0xf6, 0xbd, 0x1d, 0xfe, 0x9b, 0xfa, 0xde, 0xe3, 0x15,
	0x29, 0x22, 0xc0, 0x3a, 0x66, 0xb6, 0xf8, 0x85, 0x43, 0xe8, 0xbe, 0xb7, 0x73, 0x74, 0x0b, 0xaf,
	0xa7, 0x17, 0xce, 0xfd, 0x9d, 0x0f, 0xf4, 0x0f, 0xbc, 0x1d, 0x55, 0xfa, 0x34, 0xfd, 0x83, 0x0f,
	0xf4, 0x0f, 0x76, 0xd0, 0x21, 0xc8, 0x29, 0xc9, 0x92, 0x69, 0x3a, 0x24, 0x59, 0xde, 0x92, 0xbf,
	0x59, 0x21, 0x8c, 0xe7, 0x58, 0x7c, 0x41, 0x43, 0x2f, 0xe1, 0xf3, 0x81, 0x3f, 0x3c, 0x9b, 0x4e,
	0xf2, 0xfa, 0xf3, 0x32, 0xea, 0xa7, 0x94, 0xf7, 0xea, 0xfa, 0xde, 0x17, 0xf3, 0x06, 0xcf, 0x46,
	0x1b, 0x6f, 0xee, 0xdd, 0x93, 0xb6, 0x3f, 0xc3, 0x1b, 0x82, 0x22, 0x4a, 0xcd, 0x61, 0x04, 0xf4,
	0x14, 0x24, 0x7f, 0x38, 0x24, 0x59, 0xc6, 0x7b, 0x79, 0x7d, 0xef, 0xeb, 0x15, 0x1b, 0x31, 0x38,
	0x10, 0xe7, 0x84, 0xc3, 0x06, 0xac, 0x2d, 0x87, 0x49, 0x7b, 0x06, 0x15, 0x87, 0xb5, 0x88, 0xff,
	0xcc, 0x8a, 0x7b, 0x00, 0xf9, 0xe4, 0xbe, 0x98, 0x52, 0x72, 0xee, 0xb1, 0x02, 0xed, 0xcf, 0x32,
	0x94, 0x8f, 0x92, 0x8c, 0x7e, 0x02, 0x17, 0xdd, 0x81, 0xea, 0xbb, 0x24, 0x26, 0x6c, 0x4d, 0x64,
	0x94, 0xc4, 0x4c, 0x8b, 0x0f, 0xc6, 0x6c, 0x3a, 0x88, 0x09, 0x65, 0x4b, 0x62, 0x8a, 0xd5, 0x84,
	0xc3, 0x0a, 0x2e, 0x5f, 0x42, 0xe5, 0xd3, 0x2e, 0xe1, 0x09, 0x94, 0xd3, 0x24, 0x22, 0x3c, 0x39,
	0x1a, 0x2b, 0xe9, 0xec, 0x6c, 0x3a, 0x4e, 0x22, 0x82, 0x39, 0x03, 0xbd, 0x58, 0xf4, 0x78, 0x31,
	0xd8, 0xbe, 0xbd, 0x8e, 0xfb, 0x5e, 0x83, 0x7f, 0x01, 0xb5, 0x8c, 0xa4, 0xe7, 0x21, 0xdb, 0xbc,
	0x98, 0x64, 0xda, 0x0a, 0x05, 0x47, 0x40, 0xf1, 0x82, 0xc3, 0x42, 0xca, 0xdb, 0xb9, 0xc7, 0x83,
	0x2d, 0x8b, 0x90, 0x72, 0x8f, 0xed, 0x8f, 0x89, 0xb6, 0x0b, 0x65, 0xb6, 0x59, 0xa4, 0xc0, 0x1a,
	0xee, 0x76, 0xcc, 0xa5, 0xe6, 0x02, 0x20, 0xbd, 0x36, 0x1c, 0xd7, 0xc4, 0x79, 0x6b, 0x31, 0x7b,
	0x1d, 0xab, 0x65, 0xfc, 0x1f, 0x4d, 0xed, 0xaf, 0x22, 0x54, 0xf3, 0x8d, 0xa2, 0xe7, 0x50, 0x66,
	0xa9, 0xcb, 0xb3, 0xa0, 0xb1, 0xf7, 0xe0, 0xfa, 0xa3, 0xe9, 0xee, 0x6c, 0x42, 0x30, 0x27, 0x2d,
	0xcd, 0xcf, 0xe2, 0xb5, 0xc3, 0x6f, 0x4e, 0xbf, 0x1c, 0x5e, 0xed, 0x15, 0x94, 0x99, 0x20, 0xba,
	0x0d, 0x8a, 0xfb, 0x73, 0xcf, 0x7c, 0xaf, 0xbd, 0xcb, 0x50, 0xc1, 0x66, 0xdb, 0x72, 0x44, 0x08,
	0x0c, 0x7c, 0x68, 0xb1, 0x78, 0x14, 0xd1, 0x06, 0xac, 0x73, 0xbf, 0xd7, 0xea, 0xf4, 0x79, 0x88,
	0x4a, 0xda, 0xee, 0x47, 0x47, 0x45, 0x3b, 0x06, 0x79, 0x91, 0x6c, 0xe8, 0x21, 0xa0, 0x79, 0xba,
	0x79, 0x93, 0x94, 0x64, 0x22, 0x97, 0x45, 0x71, 0x28, 0xf3, 0x95, 0x1e, 0x5f, 0x10, 0x09, 0x1f,
	0x84, 0xd9, 0x99, 0x97, 0x85, 0xef, 0xc4, 0x04, 0x2b, 0xe1, 0x1a, 0x73, 0x38, 0xe1, 0x3b, 0xa2,
	0xdd, 0x07, 0x49, 0x14, 0x30, 0x87, 0xf9, 0xd4, 0xf7, 0x22, 0x12, 0x67, 0x5c, 0xab, 0x86, 0x6b,
	0xcc, 0xd1, 0x21, 0x71, 0x76, 0x18, 0xc0, 0xbd, 0x4b, 0xe1, 0xf2, 0x27, 0xe1, 0xa5, 0x90, 0xfd,
	0xd2, 0x1a, 0x85, 0xf4, 0x74, 0x3a, 0xd0, 0x87, 0xc9, 0x38, 0x7f, 0xf3, 0x3e, 0x12, 0x4f, 0xd8,
	0x51, 0xf2, 0x68, 0x44, 0x62, 0xfe, 0xa6, 0xbc, 0xfa, 0x31, 0xfc, 0x9c, 0x7f, 0x0c, 0x24, 0x0e,
	0x7b, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x97, 0x7c, 0x9d, 0xe9, 0x0b, 0x00, 0x00,
}
